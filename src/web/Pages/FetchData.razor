@page "/report"
@using web.Data.Adapters;
@inject IJSRuntime _jsRuntime;
@using System.Timers
@implements IDisposable

<div>
   
    <div class="jumbotron">
        <div class="well span6" style="padding-top: 50px">
            <h3 class="text-center">
                Savings for this month: 0000
            </h3>
        </div>
        <div class="well span6" style="padding-top: 50px">
            <h3 class="text-center">
                Balans!
            </h3>
        </div>
        <div id="chartdiv"></div>
        <br />
        <div class="well span6" style="padding-top: 50px">
            <h3 class="text-center">
                Expenditure!
            </h3>
        </div>
        <div id="chartdiv1"></div>
        <br />
        <div class="well span6" style="padding-top: 50px">
            <h3 class="text-center">
                Receipt!
            </h3>
        </div>
        <div id="chartdiv2"></div>
    </div>
</div>



@code{
    CategoryDto model = new CategoryDto();
    List<SumPieDto> sumList = new List<SumPieDto>();
    IEnumerable<CategoryDto> categoryList = new List<CategoryDto>();
    SumPieDto pie = new SumPieDto();
    private Timer timerObj = new(1000);



    protected override void OnAfterRender(bool firstRender)
    {
        GeneratePieChartBlazorBalans();
        GeneratePieChartBlazorExpenditure();
        GeneratePieChartBlazorReceipt();
    }

    private async Task GeneratePieChartBlazorBalans()
    {
        categoryList = CategoryAdapter.GetCategorySum();
        int count = 1;

        pie.SumExpenditure = categoryList.Select(z => z.SumExpenditure).FirstOrDefault();
        pie.SumReceipt = categoryList.Select(z => z.SumReceipt).FirstOrDefault();

        foreach (var item in categoryList)
        {
            sumList.Add(new SumPieDto() { NameCategory = item.DescriptionCategory, SumReceipt = item.BalansRecipt, SumExpenditure = item.SumExpenditure });

            if (categoryList.Count() == count)
            {
                var remainderSum = item.BalansRecipt - item.BalansExpenditure;
                sumList.Add(new SumPieDto() { NameCategory = "Amount on the balance.", SumReceipt = item.BalansRecipt, SumExpenditure = remainderSum });
                break;
            }

            count++;
        }

        //sumList.Add(new SumPieDto() { NameCategory = "Комунальні", SumReceipt = 2000, SumExpenditure = 100 });
        //sumList.Add(new SumPieDto() { NameCategory = "Харчування", SumReceipt = 2000, SumExpenditure = 300}) ;
        //sumList.Add(new SumPieDto() { NameCategory = "Відпочинок", SumReceipt = 2000, SumExpenditure = 500 });
        //sumList.Add(new SumPieDto() { NameCategory = "Cума на залишку", SumReceipt = 2000, SumExpenditure = 1100 });

        await _jsRuntime.InvokeVoidAsync("GeneraPieChartBalans", sumList);

        Dispose();
    }

    private async Task GeneratePieChartBlazorExpenditure()
    {
        categoryList = CategoryAdapter.GetCategorySum();
        int count = 1;

        pie.SumExpenditure = categoryList.Select(z => z.SumExpenditure).FirstOrDefault();
        pie.SumReceipt = categoryList.Select(z => z.SumReceipt).FirstOrDefault();

        foreach (var item in categoryList)
        {
            sumList.Add(new SumPieDto() { NameCategory = item.DescriptionCategory, SumReceipt = item.BalansRecipt, SumExpenditure = item.SumExpenditure });

            if (categoryList.Count() == count)
            {
                var remainderSum = item.BalansRecipt - item.BalansExpenditure;
                sumList.Add(new SumPieDto() { NameCategory = "Amount on the balance.", SumReceipt = item.BalansRecipt, SumExpenditure = remainderSum });
                break;
            }

            count++;
        }

        await _jsRuntime.InvokeVoidAsync("GeneraPieChartExpenditure", sumList);
    }


    private async Task GeneratePieChartBlazorReceipt()
    {
        categoryList = CategoryAdapter.GetCategorySum();
        int count = 1;

        pie.SumExpenditure = categoryList.Select(z => z.SumExpenditure).FirstOrDefault();
        pie.SumReceipt = categoryList.Select(z => z.SumReceipt).FirstOrDefault();

        foreach (var item in categoryList)
        {
            sumList.Add(new SumPieDto() { NameCategory = item.DescriptionCategory, SumReceipt = item.BalansRecipt, SumExpenditure = item.SumExpenditure });

            if (categoryList.Count() == count)
            {
                var remainderSum = item.BalansRecipt - item.BalansExpenditure;
                sumList.Add(new SumPieDto() { NameCategory = "Amount on the balance.", SumReceipt = item.BalansRecipt, SumExpenditure = remainderSum });
                break;
            }

            count++;
        }

        await _jsRuntime.InvokeVoidAsync("GeneraPieChartReceipt", sumList);
    }

    public void Dispose()
    {
        timerObj?.Dispose();
    }
}